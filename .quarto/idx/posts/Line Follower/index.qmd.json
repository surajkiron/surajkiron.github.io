{"title":"Race Circuit Line Follower","markdown":{"yaml":{"title":"Race Circuit Line Follower","author":"Suraj Kiron Nair","date":"2023-05-27","categories":["PID","Control Systems","opencv","python"],"image":"thumb1.png"},"headingText":"Background:<br/>","containsRefs":false,"markdown":"\n![](thumb1.png)\n\n\nThe goal of this project was to perform a PID reactive control capable of following the line painted on a racing circuit. PID control is one of the fundamental concepts of Linear control systems. The Controller continuously calculates an error value as the difference between desired output and the current output and applies a correction based on proportional, integral and derivative terms(denoted by P, I, D respectively). The control signal u[k] for a PID controller can be expressed as follows.<br/>\n![](eqn1.png){fig-align=\"center\"}<br/>\n\n### Proportional:<br/>\nProportional Controller gives an output which is proportional to the current error. The error e[k] is multiplied with a proportional gain(Kp) to get the output. And hence, is 0 if the error is 0.In this case the error is the difference between the center of the image and the centroid of the racing line.\n\n### Integral:<br/>\nIntegral Controller provides a necessary action to eliminate the offset error which is accumulated by the P Controller.It integrates the error over a period of time until the error value reaches to zero. \n\n### Derivative:<br/>\nDerivative Controller gives an output depending upon the rate of change or error with respect to time. It gives the kick start for the output thereby increasing system response. \n\nThe integral and dervivative errors are calculated as follows.\n![](eqn2.png)\n\n## Tuning the PID controller.\n\nFirstly, we must setup the P controller as per Ziegler Nichols method. Keep adjusting the value of the constant, till we get a value where there occurs it has neither unstable oscillations and nor slow response. <br/>\n![](https://jderobot.github.io/RoboticsAcademy/assets/images/exercises/follow_line/oscillations.gif){fig-alt=\"Unstable Oscillations\"width=45%}\n![](https://jderobot.github.io/RoboticsAcademy/assets/images/exercises/follow_line/slowresponse.gif){fig-alt=\"Slow response\"width=45%}<br/>\n\nOnce you get oscillations of constant amplitude you can adjust the derivative gains (Kd). After this the vehicle was much more stable and tracked the line accurately. Finally I modified the Integral gain which I found to have minimal effect on the system. But nonetheless helped to avoid any steady state errors.\n\n## Results and Code\n\n{{< video https://youtu.be/EW6XV_7osU8 >}}\n\n[Final Code](https://github.com/surajkiron/Robotics-Projects/tree/53683d38234db869c967596dfe763f2cc7708142/VisualLineFollow)\n\n## Learning\n\nOne mistake I made was to set the velocity of the car too high. Since the cycle time of the system is only 12Hz the controller could not detect the change in error fast enough. This led to understeer and multiple head on collision with the track walls. It's always a good idea to start with the minimal speed requirement when programming a controller and increase it once the system is more robust.\n\n## References:<br/>\n[Jde Robotics Visual Line Follow](https://jderobot.github.io/RoboticsAcademy/exercises/AutonomousCars/follow_line/)<br/>\n[What is PID control? MATLAB](https://www.youtube.com/watch?v=wkfEZmsQqiA&list=PLn8PRpmsu08pQBgjxYFXSsODEF3Jqmm-y&ab_channel=MATLAB)<br/>\n[Discrete time equations for PID control](https://engineering.stackexchange.com/questions/26537/what-is-a-definitive-discrete-pid-controller-equation)<br/>","srcMarkdownNoYaml":"\n![](thumb1.png)\n\n## Background:<br/>\n\nThe goal of this project was to perform a PID reactive control capable of following the line painted on a racing circuit. PID control is one of the fundamental concepts of Linear control systems. The Controller continuously calculates an error value as the difference between desired output and the current output and applies a correction based on proportional, integral and derivative terms(denoted by P, I, D respectively). The control signal u[k] for a PID controller can be expressed as follows.<br/>\n![](eqn1.png){fig-align=\"center\"}<br/>\n\n### Proportional:<br/>\nProportional Controller gives an output which is proportional to the current error. The error e[k] is multiplied with a proportional gain(Kp) to get the output. And hence, is 0 if the error is 0.In this case the error is the difference between the center of the image and the centroid of the racing line.\n\n### Integral:<br/>\nIntegral Controller provides a necessary action to eliminate the offset error which is accumulated by the P Controller.It integrates the error over a period of time until the error value reaches to zero. \n\n### Derivative:<br/>\nDerivative Controller gives an output depending upon the rate of change or error with respect to time. It gives the kick start for the output thereby increasing system response. \n\nThe integral and dervivative errors are calculated as follows.\n![](eqn2.png)\n\n## Tuning the PID controller.\n\nFirstly, we must setup the P controller as per Ziegler Nichols method. Keep adjusting the value of the constant, till we get a value where there occurs it has neither unstable oscillations and nor slow response. <br/>\n![](https://jderobot.github.io/RoboticsAcademy/assets/images/exercises/follow_line/oscillations.gif){fig-alt=\"Unstable Oscillations\"width=45%}\n![](https://jderobot.github.io/RoboticsAcademy/assets/images/exercises/follow_line/slowresponse.gif){fig-alt=\"Slow response\"width=45%}<br/>\n\nOnce you get oscillations of constant amplitude you can adjust the derivative gains (Kd). After this the vehicle was much more stable and tracked the line accurately. Finally I modified the Integral gain which I found to have minimal effect on the system. But nonetheless helped to avoid any steady state errors.\n\n## Results and Code\n\n{{< video https://youtu.be/EW6XV_7osU8 >}}\n\n[Final Code](https://github.com/surajkiron/Robotics-Projects/tree/53683d38234db869c967596dfe763f2cc7708142/VisualLineFollow)\n\n## Learning\n\nOne mistake I made was to set the velocity of the car too high. Since the cycle time of the system is only 12Hz the controller could not detect the change in error fast enough. This led to understeer and multiple head on collision with the track walls. It's always a good idea to start with the minimal speed requirement when programming a controller and increase it once the system is more robust.\n\n## References:<br/>\n[Jde Robotics Visual Line Follow](https://jderobot.github.io/RoboticsAcademy/exercises/AutonomousCars/follow_line/)<br/>\n[What is PID control? MATLAB](https://www.youtube.com/watch?v=wkfEZmsQqiA&list=PLn8PRpmsu08pQBgjxYFXSsODEF3Jqmm-y&ab_channel=MATLAB)<br/>\n[Discrete time equations for PID control](https://engineering.stackexchange.com/questions/26537/what-is-a-definitive-discrete-pid-controller-equation)<br/>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","theme":"cosmo","title-block-banner":true,"title":"Race Circuit Line Follower","author":"Suraj Kiron Nair","date":"2023-05-27","categories":["PID","Control Systems","opencv","python"],"image":"thumb1.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}